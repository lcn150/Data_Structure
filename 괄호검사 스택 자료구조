#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef char element;
typedef struct StackNode { //평범한 노드 생성
	element data;
	struct StackNode* link;
}StackNode;
typedef struct {
	StackNode* top; //스택을 가리키는 top포인터 생성
}LinkedStackType;
void init(LinkedStackType* s) {
	s->top = NULL;  //배열에서는 s->top =-1
}
void push(LinkedStackType* s, element item) {
	StackNode* temp = (StackNode*)malloc(sizeof(StackNode)); //item을 넣기위해 temp생성
	if (temp == NULL) {    //오버플로는 아니다
		printf("메모리 할당 에러 \n");
		return;
	}
	else {
		temp->data = item;
		temp->link = s->top;
		s->top = temp;
	}
}
void display(LinkedStackType* s) {
	StackNode* tmp = s->top;  //StackNode로 선언된tmp가 s와 호환
	while (tmp != NULL) {
		printf("%d -> ", tmp->data);
		tmp = tmp->link;
	}
}
int is_empty(LinkedStackType* s) {
	return (s->top == NULL);
}
element pop(LinkedStackType* s) {
	if (is_empty(s)) { //스택의 언더플로 체크
		printf("스택 언더플로 에러!!\n");
		exit(1);
	}
	else {
		StackNode* temp = s->top;
		element item = temp->data;    //30
		s->top = s->top->link;     //temp->data;
		free(temp);
		return item;
	}
}
int check_matching(const char* in) {
	LinkedStackType s;
	char ch, open_ch;
	int i;
	int n = strlen(in);  //string.h
	init(&s);   //초기화  s->top =NULL;

	for (i = 0; i < n; i++) {
		ch = in[i];
		switch (ch) {
		case'(':
		case'[':
		case'{':
			push(&s, ch);
			break;
		case')':
		case']':
		case'}':
			if (is_empty(&s))
				return 0;
			else {
				open_ch = pop(&s);
				if ((open_ch == '(' &&ch != ')') || (open_ch == '[' && ch != ']') || (open_ch == '{' && ch != '}')) {
					return 0;
				}
				break;
			}
		}
	}
	if (!is_empty(&s)) {
		return 0;
	}
	else {
		return 1;
	}

}
int main() {
	if (check_matching("{ A[(i+1)]=0; }")) {
		printf("괄호 에러 없음 \n");
	}
	else {
		printf("괄호 검사 실패!\n");
	}
}
