#include<stdio.h>
#include<stdlib.h>
typedef int element;
typedef struct StackNode { //평범한 노드 생성
	element data;
	struct StackNode* link;
}StackNode;
typedef struct {
	StackNode* top; //스택을 가리키는 top포인터 생성
}LinkedStackType;
void init(LinkedStackType* s) {
	s->top = NULL;  //배열에서는 s->top =-1
}
void push(LinkedStackType* s, element item) {
	StackNode* temp = (StackNode*)malloc(sizeof(StackNode)); //item을 넣기위해 temp생성
	if (temp == NULL) {    //오버플로는 아니다
		printf("메모리 할당 에러 \n");
		return;
	}
	else {
		temp->data = item;
		temp->link = s->top;
		s->top = temp;
	}
}
void display(LinkedStackType* s) {
	StackNode* tmp = s->top;  //StackNode로 선언된tmp가 s와 호환
	while (tmp != NULL) {
		printf("%d -> ", tmp->data);
		tmp = tmp->link;
	}
}
int is_empty(LinkedStackType* s) {
	return (s->top == NULL);
}
element pop(LinkedStackType* s) {
	StackNode* temp = s->top;
	if (is_empty(s)) { //스택의 언더플로 체크
		printf("스택 언더플로 에러!!\n");
		exit(1);
	}
	else {
		element item = temp->data;    //30
		s->top = s->top->link;     //temp->data;
		free(temp);
		return item;
	}
}
element peek(LinkedStackType* s) {
	if (is_empty(s)) { //스택의 언더플로 체크
		printf("스택 언더플로 에러!!\n");
		exit(1);
	}
	else {
		StackNode* temp = s->top;
		element item = temp->data;    //30
		return item;
	}
}
int main() {
	LinkedStackType s;
	init(&s);
	push(&s, 10);
	push(&s, 20);
	push(&s, 30);

	printf("pop value : %d \n", pop(&s));  //30
	display(&s);    //10 20
}
