#include<stdio.h>
#include<stdlib.h>
#define Max_Queue_Size 5
typedef int element;
typedef struct{
	element queue[Max_Queue_Size];
	int front, rear;
}QueueType;
void init(QueueType* q){  //원형큐에서는 0을 가리킴
	q->front = q->rear = 0;
}
void error(const char* message){
	printf("%s \n", message);
	exit(1); //stdlib.h
}
int is_full(QueueType* q){  //원형큐에서는 데이터 저장소(0번지)를 포기함
	return ( (q->rear+1) % Max_Queue_Size ==q->front);
}
void enqueue(QueueType* q, element item){
	if(is_full(q)){ //오버플로상태
		error("큐가 포화상태임");
	}

	q->rear = (q->rear+1)%Max_Queue_Size;   //원형큐에서 4번다음으로 0번이 삽입될수있게
	q->queue[q->rear] = item; //queue[1]에 item삽입
}
int is_empty(QueueType* q){
	return q->front =q->rear;
}
element dequeue(QueueType* q){
	if(is_empty(q)){  ///언더플로에러
		error("큐가 비어있습니다.");
	}
	q->front = (q->front+1) % Max_Queue_Size;
	return q->queue[q->front];
}
int main(){
	QueueType q;   //구조체 변수
	init(&q);
	enqueue(&q, 10);
	enqueue(&q, 20);
	enqueue(&q, 30);
	enqueue(&q, 40);

	printf("dequeue : %d \n", dequeue(&q));
	printf("dequeue : %d \n", dequeue(&q));
	for(int i=q.front+1; i<=q.rear; i++){    //front는 0번, rear는 3번에 있다.
		printf("%d\n", q.queue[i]);          //0~4까지만 작동
	}
	enqueue(&q, 50);
	printf("rear =%d, front =%d \n", q.rear, q.front);   //0, 2

	enqueue(&q, 60);
	printf("rear =%d, front =%d \n", q.rear, q.front);   //1, 2

	printf("dequeue : %d \n", dequeue(&q));
	printf("rear =%d, front =%d \n", q.rear, q.front);   //1, 3
}
