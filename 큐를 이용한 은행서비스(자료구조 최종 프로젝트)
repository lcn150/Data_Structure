#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include<time.h>

#define FALSE 0 //명확하게 0은 거짓, 1은 참으로 설정해 놈
#define TRUE 1
#define MAX_QUEUE_SIZE 100

typedef struct {     // 고객 1명당 번호, 도착시간, 걸리는 서비스 시간 element 생성
	int id; // 고객 고유 번호.
	int arrival_time; // 고객 도착 시간
	int service_time; // 고객에게 걸리는 서비스 시간
} element;

typedef struct { //일반적인 QueueType 생성
	element queue[MAX_QUEUE_SIZE];
	int front;
	int rear;
} QueueType;

QueueType queue; // 전역 변수queue 생성

void error(char *message) { //에러메세지 출력 큐가 꽉찼을 때 에러
	printf("%s\n", message);
	exit(1);
}
void init(QueueType *q) {   //초기화 함수
	q->front = q->rear = 0;
}
int is_empty(QueueType *q) {  //언더플로
	return q->front == q->rear;
}
int is_full(QueueType *q) {  //오버플로
	return (q->rear + 1) % MAX_QUEUE_SIZE == q->front;
}
void enqueue(QueueType *q, element item) {   //삽입함수
	q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
	q->queue[q->rear] = item;
}
element dequeue(QueueType *q) {   //삭제함수
	
	q->front = (q->front + 1) % MAX_QUEUE_SIZE;
	return q->queue[q->front];
}
element peek(QueueType *q) {   //들여다보는 함수

	return q->queue[q->front];
}
double random() {   //random함수  <math.h>
	return rand() / (double)RAND_MAX;
}

// 시뮬레이션에 필요한 여러가지 상태변수
int durations = 10; //  시뮬레이션 시간: 10시간
double arrival_prob = 0.7; // 시간단위에 따라 고객이 도착 확률70%
int max_serv_time = 5; // 하나의 고객에 대한 최대서비스 시간
int clocks; // 현재 시각

// 시뮬레이션의 결과
int customers; // 전체 고객수
int served_customers; // 서비스 받은 고객수
int waited_time; // 고객이 기다린 시간

//랜덤 숫자를 생성하여 고객이 도착했는지 도착하지 않았는지를 판단
int is_customer_arrived() {
	if (random() < arrival_prob) {
		return TRUE;
	}
	return FALSE;
}

void insert_customer(int arrival_time) {  //새로 도착한 고객을 큐에 삽입
	element customer;
	customer.id = customers++;
	customer.arrival_time = arrival_time;
	// 서비스 시간 = 1,2,3,4,5 중에 랜덤으로 하나가 선택된다
	customer.service_time = (int)(max_serv_time * random()) + 1;  
	enqueue(&queue, customer);
	printf("고객번호 [%d]이 %d분에 도착했습니다. 서비스 시간은 %d분입니다. \n",
		customer.id,
		customer.arrival_time,
		customer.service_time);
}

// 큐에서 기다리는 고객을 한명 꺼내서 서비스시간을 반환한다
int remove_customer() {  //서비스를 받고 나가는 고객
	element customer;
	int service_time;

	if (is_empty(&queue))
		return 0; // 기다리는 고객이 없다
	customer = dequeue(&queue);
	service_time = customer.service_time - 1; //손님이 빠져나가서 시간이 줄어들음
	served_customers++; //서비스 받은 손님을 +1

	waited_time += clocks - customer.arrival_time; // 현재시간 - 도착시간
	printf("고객번호 [%d]이 %d분에 서비스를 시작합니다. 대기시간은 %d분이었습니다.\n",
		customer.id, clock, clocks - customer.arrival_time);

	return service_time;
}

void print_stat() {  //통계치 출력함수
	printf("서비스 받은 고객 수 = %d\n", served_customers);
	printf("전체 대기 시간 = %d분", waited_time);
	printf("1인당 평균 대기 시간 = %f분\n", (double)waited_time / served_customers);
	printf("아직 대기 중인 고객 수 = %d\n", customers - served_customers);
}

int main() { //시뮬레이션
	clock_t start, finish;
	double duration;
	start = clock();

	int service_time = 0;
	clocks = 0;

	while (clocks < durations) {
		clocks++;
		printf("현재 시각=%d\n", clock);
		if (is_customer_arrived())
			insert_customer(clocks);
		if (service_time > 0) // server가 하나임을 의미한다
			service_time--;   // 한명의 고객이 모두 처리될 때까지 다른 고객을 받지 않는다
		else
			service_time = remove_customer();
	}

	print_stat();
	finish = clock();
	duration = (double)(finish - start) / CLOCKS_PER_SEC;
	printf("실행시간은 %f 초입니다\n", duration);
	return 0;
}
